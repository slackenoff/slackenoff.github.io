{"pages":[],"posts":[{"title":"docker","text":"Docker采用客户端/服务器端架构, 使用远程API来管理和创建容器, 可以轻松的创建一个轻量级的, 可移植的容器. 相较于虚拟机，docker的交付速度更快，资源消耗更低，基本没有性能损耗。 传统虚拟机是虚拟出一个主机硬件, 并且运行一个完整的操作系统, 然后在这个系统上安装和运行软件,在物理机上，运行的虚拟机的数量很有限。 容器内的应用直接运行在宿主机的内核之上, 容器并没有自己的内核, 也不需要虚拟硬件, 相当轻量化，相较于虚拟机，容器可以运行几百个。 每个容器间是相互隔离, 每个容器内都要一个属于自己的独立文件系统, 独立的进程空间, 网络空间, 用户空间等, 所以在同一个宿主机上的多个容器之间彼此不会相互影响 Docker的三大理念就是build, ship, run. Docker通过namespace和cgroup来提供容器的资源隔离与安全保障等, 所以Docker容器在运行时, 不需要类似虚拟机的额外资源开销, 因此可以大幅度提供资源利用率 docker结构 client：通过client与daemon建立通信 daemon： daemon是系统进程，运行docker即运行daemon， 1. 用于接收并处理client发起的请求， 2. 管理所有的docker容器。 daemon的组成： server、engine and Job。 server接收请求后，通过路由寻找handler，并分发给对应handler处理请求 engine是docker的核心模块，存储容器信息，管理docker大部分job的执行 job是gengine内部的基本工作执行单元，如运行、创建、下载等动作 registry： 存储容器镜像的仓库。容器镜像是容器创建时用来初始化容器的文件系统内容。 与registry通信一般有3种动作， search 搜索、pull 下载 、push 上传 安装 dockerDocker支持64位版本的CentOS 7和CentOS 8及更高版本，它要求Linux内核版本不低于3.10。 1. 卸载旧的版本 (重新安装需要这一步) yum remove docker *** /// ***指docker相关的目录全部删掉 2. 配置仓库 先下载软件包： yum install -y yum-utils 国内的仓库： yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 3. 安装 yum install -y docker-ce 下载过程中报错，会有建议执行命令，照着敲就好了。 4.启动docker systemctl start docker 或 service docker start 5.常见的Docker操作命令： 搜索仓库镜像：docker search 镜像名 拉取镜像：docker pull 镜像名 下载的镜像存放在 /var/lib/docker/image下 查看正在运行的容器：docker ps 查看所有容器：docker ps -a 删除容器：docker rm container_id 查看镜像：docker images 删除镜像：docker rmi image_id 启动（停止的）容器：docker start 容器ID 停止容器：docker stop 容器ID 重启容器：docker restart 容器ID 通过docker help命令来查看。 以tomcat为例使用docker部署并运行tomcat //docker的默认目录为/var/lib/docker //镜像下载目录为 /docker/image/overlay2 1. docker search tomcat: 版本信息 2. docker pull 下载查询出的tomcat-name镜像 3. docker images 查看镜像 4. docker run -d \\ --后台运行， -t为交互式运行 -p linux服务器端口：容器端口号 \\ --内外映射 --name 给容器起名字 5. 查看tomcat运行情况， curl 0.0.0.0：端口号 ，会返回一串前端的html页面信息 6. 查看容器运行状态： docker ps （-a） 7. 关闭容器： docker stop container_id 8. 删除容器： docker rm container_id --可以用正则表达式或者管道函数，批量删除或者关闭容器 容器资源分配问题 创建容器时，可能要考虑内存泄漏，out-of-memory，因此 使用-m参数来设置分配内存大小","link":"/2023/04/20/docker/"},{"title":"linux命令","text":"linux是助推器，影响个人在IT赛道上的speed推荐一个我认为比较实用的查询网站linux命令搜索 包管理命令：apt、yum、dnf(fedora)yum介绍yum是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器，它可以使系统管理人员交互和自动化地更新与管理RPM软件包，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。 yum语法： yum [选项] [参数]选项： -h：显示帮助信息； -y：对所有的提问都回答“yes”； -c：指定配置文件； -q：安静模式； -v：详细模式； -d：设置调试等级（0-10）； -e：设置错误等级（0-10）； -R：设置yum处理一个命令的最大等待时间； -C：完全从缓存中运行，而不去下载或者更新任何头文件。 参数： install：安装rpm软件包； update：更新rpm软件包； check-update：检查是否有可用的更新rpm软件包； remove：删除指定的rpm软件包； list：显示软件包的信息； search：检查软件包的信息； info：显示指定的rpm软件包的描述信息和概要信息； clean：清理yum过期的缓存，clean all； shell：进入yum的shell提示符； resolvedep：显示rpm软件包的依赖关系； localinstall：安装本地的rpm软件包； localupdate：显示本地rpm软件包进行更新； deplist：显示rpm软件包的所有依赖关系。 apt-get介绍apt-get命令 是Debian Linux发行版中的APT软件包管理工具。所有基于Debian的发行都使用这个包管理系统。deb包可以把一个应用的文件包在一起，大体就如同Windows上的安装文件。 apt-get语法：apt-get [选项] 选项： apt-get install # 安装新包 apt-get remove # 卸载已安装的包（保留配置文件） apt-get purge # 卸载已安装的包（删除配置文件） apt-get update # 更新软件包列表 apt-get upgrade # 更新所有已安装的包 apt-get autoremove # 卸载已不需要的包依赖 apt-get dist-upgrade # 自动处理依赖包升级 apt-get autoclean # 将已经删除了的软件包的.deb安装文件从硬盘中删除掉 apt-get clean # 删除软件包的安装包 -c：指定配置文件。 – 执行命令重现的一对命令： script 以及scriptreplay centos系统目录 1. cat /etc/os-release 查看系统版本 hostnamectl uname -a uname -r 2. cd /var/cache/yum 相关命令 yum makecache fast 将软件包信息提前在本地索引缓存，用来提高搜索安装软件的速度， yum clean all 清除索引缓存和下载包的缓存。 3. cd /etc/yum.repos.d 切换、查看yum镜像源的目录 vim xxx.repo 修改源配置文件 yum repolist 查看镜像源列表 源有： epel、extras、update、base 四种 4. 查看内核版本有三种方式： cat /proc/version uname -a uname -r 实用命令 windows下的文件比对工具，如beyondCompare、ultraCompare （收费）， Winmerge（免费） ，或者文本编辑器下插件（如notepad++，vscode,sublime等）linux下diff命令，或者meld工具 diff 命令 diff【2个文件，不带参数时，描述如何调整第一个文件来与第二个文件想匹配】 -q或--brief // 仅显示有无差异，不显示详细的信息 如果不同，输出Files a and b differ -c // 显示全部内容，并标出不同之处， ！ + - *** 代表 第一个文件 --- 代表 第二个文件 ！ 需要在第一个文件修改一行或多行 + 需要在第一个文件添加行 - 需要在第一个文件删除行 注： 默认输出须知 diff [不带参] (a：添加， c：改变 ，d：删除） &lt; 开头的行表示来自第一个文件 &gt; 开头的行表示来自第二个文件 diff3【3个文件】 比较三个文件，将不同之处显示到标准输出 -A 注： ====表示文件全不相同 ====3表示 第3个文件与其他2个不同 sort命令 sort -r 按逆序输出排序结果 以行首字母为排序对象 -c 检查指定文件中的内容是否按字母顺序排序，不符合则输出 sort: 文件名：行号： disordr: 无序内容 awk命令sed命令","link":"/2023/04/06/linux%E5%91%BD%E4%BB%A4/"},{"title":"概念积累","text":"概念1 中心化与去中心化 有中心，就有非中心 中心化：我们拿太阳系来说，太阳是中心，其他的星体是非中心，所有非中心直接或间接的围绕着太阳公转，因为需要依赖太阳来维持平衡 去中心化：我们拿打公交和打网约车来说， 公交的路线是固定的，我要去哪，得规划公交路线，考虑换乘，公交站点就是中心，而打网约车，从哪上车，去哪都是我说了算，车要以我为导向。 放到互联网行业，拿买菜来说，去菜市场买菜就是中心化，通过买菜软件买菜就是去中心化 去中心化本身也是中心化的一种形态，去中心化的实质是通过开拓多中心，弱化单一中心。 概念2 流程管理概念3 saas saas是互联网发展过程中的衍生出的一种软件服务模式。 saas的显著特点：租售服务 概念4 裂变工具 裂变手段： 群裂变、任务裂变 概念5 公域与私域私域： 品牌直连客户， 私域业态：小程序，品牌官网/app，社群等。 核心资产：用户和流量。 重要特征：产权自有，自主经营；线上线下一体化，全渠道数字化；直连用户。 在腾讯智慧零售课堂上看到的一个比较nice的观点： 用户价值水轮： 聚水流-&gt;凝水势-&gt;激水花（转折点）-&gt;变水力-&gt;促循环 公域","link":"/2023/04/03/%E6%A6%82%E5%BF%B5%E7%A7%AF%E7%B4%AF/"},{"title":"oracle基础","text":"oracle简介 ORACLE数据库系统是美国ORACLE公司（甲骨文）提供的以分布式数据库为核心的一组软件产品，是目前最流行的客户 / 服务器（client / server 或 B / S）体系结构的数据库之一。迄今为止ORACLE数据库是世界上使用最广泛的数据库管理系统。 oracle的特点 支持多用户、大事务量的事务处理 数据安全性和完整性控制（银行金融等行业比较看重这一点） 支持分布式数据处理 可移植性 数据库相关概念实例、用户、表空间 sql基础","link":"/2023/04/02/oracle%E5%9F%BA%E7%A1%80/"},{"title":"博客搭建过程记录","text":"记录下hexo+github博客搭建过程 1. 第一步 github创建repo命名规范如： githubusername.github.io，不能自定义。 2. 第二步 本地配置主要有2部分，node+hex的环境搭建及部署，git+github的环境搭建及部署。 2.1 先安装node，node网址，配置环境变量 ，添加path 2.2 指定一个目录，进入终端，在该目录下执行 ： npm install -g hexo 默认这个目录就是hexo的根目录 2.3 本地服务配置命令 初始化： hexo init 生成默认的hexo模板： hexo g 启动本地预览服务，-p指定端口： hexo server -p 5000 （默认是4000） 2.4 默认的主题很简约，所以可以考虑改主题,这是 主题的官网地址 , 在根目录下，打卡bash终端， git clone [主题的github地址] themes/[主题名] 默认会下载到hexo的themes目录下，文件夹名为[主题名]，按照对应仓库下的readme.md文件，配置yml。 2.5 修改完，刷新本地的静态页面，观察效果 3.第三步 上传github仓库hexo d 上传配置到github的repo 3.1 git配置 git config user.email &quot;&quot; &lt;br&gt; git config user.name &quot;&quot; ssh-keygen -t rsa -C &quot;邮箱地址&quot; github设置中，修改ssh的绑定信息 ————————————-配置完成 4. 第四步 上传远端仓库 hexo clean hexo d -g 5. 至此就可以访问xxx.github.io了，如果不能正常访问，可以考虑主题文件缺失，或者配置有误，一般是低级错误导致的","link":"/2023/04/02/2023-4-2-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"概念相关","slug":"概念相关","link":"/tags/%E6%A6%82%E5%BF%B5%E7%9B%B8%E5%85%B3/"},{"name":"oracle","slug":"oracle","link":"/tags/oracle/"},{"name":"环境搭建类","slug":"环境搭建类","link":"/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%B1%BB/"}],"categories":[]}